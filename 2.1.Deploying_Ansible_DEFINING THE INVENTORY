In its simplest form, an INI-style static inventory file is a list of host names or IP addresses of managed hosts, each on a single line:
web1.example.com
web2.example.com
db1.example.com
db2.example.com
192.0.2.42
Normally, however, you organize managed hosts into host groups. Host groups allow you to more effectively run Ansible against a collection of systems. In this case, each section starts with a host group name enclosed in square brackets ([]). This is followed by the host name or an IP address for each managed host in the group, each on a single line.
Eg:
[webservers]
web1.example.com
web2.example.com
192.0.2.42
[db-servers]
db1.example.com
db2.example.com
-------------
/*Hosts can be in multiple groups. In fact, recommended practice is to organize your hosts into
multiple groups, possibly organized in different ways depending on the role of the host, its physical
location, whether it is in production or not, and so on. This allows you to easily apply Ansible plays
to specific hosts.*/

//each section starts with a host
group name enclosed in square brackets ([])//

eg2:
[webservers]
web1.example.com
web2.example.com
192.0.2.42
[db-servers]
db1.example.com
db2.example.com
[east-datacenter]
web1.example.com
db1.example.com
[west-datacenter]
web2.example.com
db2.example.com
[production]
web1.example.com
web2.example.com
db1.example.com
db2.example.com
[development]
192.0.2.42

------------------
Defining Nested Groups
/*Ansible host inventories can include groups of host groups. This is accomplished by creating a
host group name with the :children suffix. The following example creates a new group called
north-america, which includes all hosts from the usa and canada groups.*/
[usa]
washington1.example.com
washington2.example.com
[canada]
ontario01.example.com
ontario02.example.com
[north-america:children]
canada
usa
---------------------------
Simplifying Host Specifications with Ranges
/*
You can specify ranges in the host names or IP addresses to simplify Ansible host inventories. You
can specify either numeric or alphabetic ranges. Ranges have the following syntax:
*/
[START:END]
eg:
#192.168.[4:7].[0:255] matches all IPv4 addresses in the 192.168.4.0/22 network (192.168.4.0 through 192.168.7.255).
#server[01:20].example.com matches all hosts named server01.example.com through server20.example.com.
#[a:c].dns.example.com matches hosts named a.dns.example.com, b.dns.example.com, and c.dns.example.com.
#2001:db8::[a:f] matches all IPv6 addresses from 2001:db8::a through 2001:db8::f.
/*
If leading zeros are included in numeric ranges, they are used in the pattern. The second example
above does not match server1.example.com but does match server07.example.com.
To illustrate this, the following example uses ranges to simplify the [usa] and [canada] group
definitions from the earlier example:
*/
[usa]
washington[1:2].example.com
[canada]
ontario[01:02].example.com



